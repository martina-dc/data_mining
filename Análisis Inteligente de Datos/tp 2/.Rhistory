options(repr.plot.width=7, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = acousticness, color = liveness_dis) +
geom_point() +
ggtitle("Energia vs Nivel de Arcustica - Categorizado por En vivo") +
labs(caption = 'Gr√É¬°fico 11 - Scatter plot del nivel de ac√É¬∫stica vs la energ√É≠a considerando si fue grabada en vivo o no') +
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 12
options(repr.plot.width=7, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = acousticness ,color = categoria_album_a)+
geom_point() +
ggtitle("Energia vs Nivel de Ac√É¬∫stica - Categorizado por Cat. del Album") +
labs(caption = 'Gr√É¬°fico 12 - Scatter plot del nivel de ac√É¬∫stica vs la energ√É≠a considerando la categor√É≠a del album') +
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 13
options(repr.plot.width=8, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = valence, y = acousticness, color = liveness_dis) +
geom_point() +
ggtitle("Positividad vs Nivel de Arcustica - Categorizado por En vivo") +
labs(caption = 'Gr√É¬°fico 13 - Scatter plot del nivel de ac√É¬∫stica vs la positividad considerando si fue grabado en vivo o no')+
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 14
options(repr.plot.width=8, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = valence, y = acousticness ,color = categoria_album_a) +
geom_point() +
ggtitle("Positividad vs Nivel de Arcustica - Categorizado por Cat. del Album")+
labs(caption = 'Gr√É¬°fico 14 - Scatter plot del nivel de ac√É¬∫stica vs la positividad considerando si la categor√É≠a del album')+
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Instalamos los paquetes necesarios y los cargamos
list_of_packages <- c( "dplyr", "tibble", "ggplot2", "cowplot", "tidyr", "ggridges", "ggbeeswarm",
"GGally",  "plotly", "treemapify", "here",  "vcd", "colorspace", "corrplot",
"readxl", 'pastecs','kableExtra','IRdisplay')
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
suppressWarnings(suppressMessages(invisible(lapply(list_of_packages, library, character.only = TRUE))))
#Leemos el archivo de trabajo resultados.txt
PATH <- here('tp 2','Datos')
PATH_TP1 <- here('tp1', 'Datos')
df_charly<- read.delim(file.path(PATH, 'resultado.txt'),
header = TRUE,
)
#Leemos el archivo que nos brindara la categoria de los albums
albums <- read_excel(
path = file.path(PATH_TP1,"albums.xlsx")
)
#Nuestro primer archivo de trabajo tiene la siguiente estructura:
#head(df_charly)
#El segundo archivo que cuenta con la informaci√É¬≥n de los albums es de la siguiente manera:
#head(albums)
#Le agregamos al df_charly la informaci√É¬≥n referida a la categoria de los albums. Ya no utilizaremos mas el dataframe de los albums ya que llevamos toda su informaci√É¬≥n al df_charly.
#Por √É¬∫ltimo tenemos el siguiente archivo del top 99:
cien_mejores <-  read_excel(file.path(PATH,"100 mejores.xlsx"))
cien_mejores <- cien_mejores  %>%
select (-Artist,-Album,-"Date Added") %>%
rename(name = Track) %>%
mutate( name = as.factor(name),
Top_cien = "SI"
)
df_charly <- merge(x = cien_mejores,
y = df_charly,
by = "name",
all.x= FALSE,
all.y = TRUE
)  %>%
mutate(Top_cien = case_when(
is.na(Top_cien) ~ 'NO',
TRUE ~ 'SI'
)
)
#head(cien_mejores)
#Ahora utilizaremos el 'name' para joinear esta tabla con el df_charly e incorporarle al mismo una marca que nos indique si la canci√É¬≥n es parte de las 99 mejores o no.
#Validamos tambien la clave para entender si por diferencias en la escritura de la misma no podremos marcar las 99.
#Al no contar con una clave numerica del album en el archivo cien mejores, tendremos que usar el nombre, aunque no sea lo mas recomendado.
#Finalmente, encontramos las siguientes 11 canciones que se encuentran escritas de diferente manera por lo que ser√É¬°n excluidas y nos quedaremos con las 88 mejores, en vez de las 99 originales.
#Validamos el archivo que tiene las canciones descargadas de spotify
lista_de_canciones <- distinct(tibble::enframe((df_charly$name)))
lista_de_canciones <- lista_de_canciones  %>%
merge(cien_mejores,
by.x = "value",
by.y = 'name',
all.x= TRUE,
all.y = FALSE
)  %>%
mutate(Top_cien = case_when(
is.na(Top_cien) ~ 'NO',
TRUE ~ 'SI'
)
)
lista_de_canciones_si <- lista_de_canciones  %>%
filter(Top_cien == 'SI')
top_cien_no_encontradas <- cien_mejores %>%
select(-Top_cien)  %>%
merge(lista_de_canciones_si,
by.y = "value",
by.x = 'name',
all.x= TRUE,
all.y = FALSE
)  %>%
filter(is.na(Top_cien))  %>%
select(-Top_cien)
lista_de_canciones_si <- lista_de_canciones  %>%
filter(Top_cien == 'SI')
top_cien_no_encontradas <- cien_mejores %>%
select(-Top_cien)  %>%
merge(lista_de_canciones_si,
by.y = "value",
by.x = 'name',
all.x= TRUE,
all.y = FALSE)  %>%
filter(is.na(Top_cien))  %>%
select(-Top_cien)
#Aqui arriba lo que hicimos fue intentar entender con cuantas de las 99 habiamos podido joinear.
#En top 100 no encontradas estan las 11 que no matchearon
View(top_cien_no_encontradas)
rm(ls=list())
rm(ls()=)
#Instalamos los paquetes necesarios y los cargamos
list_of_packages <- c( "dplyr", "tibble", "ggplot2", "cowplot", "tidyr", "ggridges", "ggbeeswarm",
"GGally",  "plotly", "treemapify", "here",  "vcd", "colorspace", "corrplot",
"readxl", 'pastecs','kableExtra','IRdisplay')
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
suppressWarnings(suppressMessages(invisible(lapply(list_of_packages, library, character.only = TRUE))))
#Leemos el archivo de trabajo resultados.txt
PATH <- here('tp 2','Datos')
PATH_TP1 <- here('tp1', 'Datos')
df_charly<- read.delim(file.path(PATH, 'resultado.txt'),
header = TRUE,
)
#Leemos el archivo que nos brindara la categoria de los albums
albums <- read_excel(
path = file.path(PATH_TP1,"albums.xlsx")
)
#Nuestro primer archivo de trabajo tiene la siguiente estructura:
#head(df_charly)
#El segundo archivo que cuenta con la informaci√É¬≥n de los albums es de la siguiente manera:
#head(albums)
#Le agregamos al df_charly la informaci√É¬≥n referida a la categoria de los albums. Ya no utilizaremos mas el dataframe de los albums ya que llevamos toda su informaci√É¬≥n al df_charly.
#Por √É¬∫ltimo tenemos el siguiente archivo del top 99:
cien_mejores <-  read_excel(file.path(PATH,"100 mejores.xlsx"))
cien_mejores <- cien_mejores  %>%
select (-Artist,-Album,-"Date Added") %>%
rename(name = Track) %>%
mutate( name = as.factor(name),
Top_cien = "SI"
)
df_charly <- merge(x = cien_mejores,
y = df_charly,
by = "name",
all.x= FALSE,
all.y = TRUE
)  %>%
mutate(Top_cien = case_when(
is.na(Top_cien) ~ 'NO',
TRUE ~ 'SI'
)
)
#head(cien_mejores)
#Ahora utilizaremos el 'name' para joinear esta tabla con el df_charly e incorporarle al mismo una marca que nos indique si la canci√É¬≥n es parte de las 99 mejores o no.
#Validamos tambien la clave para entender si por diferencias en la escritura de la misma no podremos marcar las 99.
#Al no contar con una clave numerica del album en el archivo cien mejores, tendremos que usar el nombre, aunque no sea lo mas recomendado.
#Finalmente, encontramos las siguientes 11 canciones que se encuentran escritas de diferente manera por lo que ser√É¬°n excluidas y nos quedaremos con las 88 mejores, en vez de las 99 originales.
#Validamos el archivo que tiene las canciones descargadas de spotify
lista_de_canciones <- distinct(tibble::enframe((df_charly$name)))
lista_de_canciones <- lista_de_canciones  %>%
merge(cien_mejores,
by.x = "value",
by.y = 'name',
all.x= TRUE,
all.y = FALSE
)  %>%
mutate(Top_cien = case_when(
is.na(Top_cien) ~ 'NO',
TRUE ~ 'SI'
)
)
lista_de_canciones_si <- lista_de_canciones  %>%
filter(Top_cien == 'SI')
top_cien_no_encontradas <- cien_mejores %>%
select(-Top_cien)  %>%
merge(lista_de_canciones_si,
by.y = "value",
by.x = 'name',
all.x= TRUE,
all.y = FALSE
)  %>%
filter(is.na(Top_cien))  %>%
select(-Top_cien)
lista_de_canciones_si <- lista_de_canciones  %>%
filter(Top_cien == 'SI')
top_cien_no_encontradas <- cien_mejores %>%
select(-Top_cien)  %>%
merge(lista_de_canciones_si,
by.y = "value",
by.x = 'name',
all.x= TRUE,
all.y = FALSE)  %>%
filter(is.na(Top_cien))  %>%
select(-Top_cien)
#Aqui arriba lo que hicimos fue intentar entender con cuantas de las 99 habiamos podido joinear.
#En top 100 no encontradas estan las 11 que no matchearon
# Agregamos al df charly la categoria
albums <- albums  %>%
select(id, categoria)
df_charly <- df_charly  %>%
merge(albums,
by.x = 'album_id',
by.y = 'id',
all.x = TRUE)  %>%
rename(categoria_album = categoria)
#Tabla 1
head(df_charly[1:2],2)
head(df_charly[3:6],2)
head(df_charly[7:11],2)
head(df_charly[12:18],2)
head(df_charly[19:22],2)
head(df_charly[23:24],2)
#Eliminamos columnas que no utilizaremos para el an√É¬°lisis por no ser columnas de interes
df_charly <- df_charly %>%
select(-album_id, -id, -uri, -analysis_url)
options(digits=1, pager = T)
resumen <- pastecs::stat.desc(df_charly[7:18])
resumen <- resumen  %>%
rename('danc.'=danceability,
'loud.' = loudness,
'speech.' = speechiness,
'acous.' = acousticness,
'instr.' = instrumentalness,
'live.' = liveness,
'dur.' = duration_ms
)
#mostramos las variables de resumen mas importantes
#Tabla 2
head(resumen, 9)
#Discretizamos livneness en liveness_dis
df_charly <- df_charly  %>%
mutate(liveness_dis = case_when( liveness > 0.5 ~ 1,
liveness <= 0.5 ~ 0
),
liveness_dis = as.factor(liveness_dis)
)
# agrupamos categoria_album
df_charly <- df_charly  %>%
separate(categoria_album, c("categoria_album_a", "borrar"), "_")  %>%
select(-borrar)
df_charly <- df_charly  %>%
select(name, Top_cien, categoria_album_a,  album_name, album_artist, liveness_dis, energy, acousticness, duration_ms, valence)
#Tabla 3
head(df_charly[1:3],2)
head(df_charly[4:10],2)
# Tabla 4
frecuencia_album_name <- df_charly %>%
select(album_name) %>%
table() %>%
as.data.frame() %>%
rename('Album_Name' = '.' )
frecuencia_album_name <- frecuencia_album_name[order(frecuencia_album_name$Freq, decreasing = T),]
head(frecuencia_album_name,6)
#Tabla 5
frecuencia_categoria <- df_charly %>%
select(categoria_album_a) %>%
table() %>%
as.data.frame() %>%
rename('Categoria' = '.' )
head(frecuencia_categoria[order(frecuencia_categoria$Freq, decreasing = T),], 4)
#Tabla 6
frecuencia_album_artist <- df_charly %>%
select(album_artist) %>%
table() %>%
as.data.frame() %>%
rename('Album_Artist' = '.' )
head(frecuencia_album_artist[order(frecuencia_album_artist$Freq, decreasing = T),],6 )
#Tabla 7
frecuencia_conjuntas <- df_charly %>%
select(categoria_album_a, album_name, album_artist) %>%
table() %>%
as.data.frame() %>%
filter(Freq != 0)
head(frecuencia_conjuntas[order(frecuencia_conjuntas$Freq, decreasing = T),], 10)
#Grafico 1
# Con frecuencias relativas
options(repr.plot.width=5, repr.plot.height=2)
theme_set(theme_bw())
ggplot(df_charly) +
aes(x = album_artist, y = ..count.. / sum(..count..)) +
geom_bar(width = 0.75) +
coord_flip() +
scale_y_continuous("Porcentaje", labels = scales::percent) +
ggtitle("% de canciones por Artista") +
labs(caption = 'Gr√É¬°fico 1 - Porcentaje de canciones por artista') +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold')
)
#Grafico 2
# Con frecuencias relativas
options(repr.plot.width=6, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = album_artist, fill = Top_cien ) +
geom_bar(position = 'fill') +
coord_flip() +
scale_y_continuous("Porcentaje", labels = scales::percent) +
ggtitle("% de canciones por Artista", ) +
labs(caption = 'Gr√É¬°fico 2 - Porcentaje de canciones por artista dentro del top 100') +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'))+
scale_fill_brewer(palette = "Pastel1")
#Grafico 3
options(repr.plot.width=6, repr.plot.height=2.5)
g <- df_charly %>%
drop_na(categoria_album_a) %>%
ggplot() +
aes(x = categoria_album_a, fill = Top_cien) +
labs(x = "categoria_album_a ",
y = "Cant. caciones",
fill = "Top 100"
) +
geom_bar(position = "dodge") +
ggtitle("Cant. de Exitos por Categoria de Album") +
labs(caption = 'Gr√É¬°fico 3 -Cantidad de √É¬©xitos por categor√É≠a de √É¬°lbum')+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
plot.margin=unit(c(0,0,0,2),"cm")
) +
scale_fill_brewer(palette = "Pastel1")
plot(g)
#Grafico 4
options(repr.plot.width=10, repr.plot.height=4)
g <- df_charly %>%
filter(categoria_album_a == "recop") %>%
drop_na(album_name) %>%
ggplot() +
aes(x = album_name, fill = Top_cien) +
labs(x = "",
y = "Cant. canciones",
fill = "Top 100") +
labs( caption = 'Gr√É¬°fico 4- Cantidad de √É¬©xitos por Album para la cat "Recop" ') +
geom_bar(position = "dodge") +
ggtitle("Cant. de Exitos por Album de categoria Recop") +
scale_fill_brewer(palette = "Pastel1") +
coord_flip() +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 7),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
plot(g)
#Grafico 5
options(repr.plot.width=5, repr.plot.height=2)
ggplot(df_charly) +
aes(x = energy, y = album_artist) +
geom_boxplot(show.legend = F) +
labs(x = "Energ√É≠a de las canciones",
y = "Artistas",
caption = 'Gr√É¬°fico 5 - Boxplot de la energ√É≠a de las canciones')  +
scale_fill_brewer(palette = "Pastel1") +
ggtitle("BoxPlot de la Energia por Artista" )  +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 6
options(repr.plot.width=5, repr.plot.height=2)
ggplot(df_charly) +
aes(x = acousticness, y = album_artist) +
geom_boxplot(show.legend = F) +
labs(x = "Ac√É¬∫stica",
y = "Artistas") +
labs(caption = 'Gr√É¬°fico 6 - Boxplot del nivel de ac√É¬∫stica de las canciones')  +
scale_fill_brewer(palette = "Pastel1") +
ggtitle("BoxPlot del nivel de ac√É¬∫stica por Artista" )  +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 7
options(repr.plot.width=5, repr.plot.height=2)
ggplot(df_charly) +
aes(x = duration_ms, y = album_artist) +
geom_boxplot(show.legend = F) +
labs(x = "Duracion",
y = "Artistas") +
labs(caption = 'Gr√É¬°fico 7 - Boxplot de la duraci√É¬≥n')  +
scale_fill_brewer(palette = "Pastel1") +
ggtitle("BoxPlot de la duraci√É¬≥n por Artista" )  +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 8
options(repr.plot.width=5, repr.plot.height=2)
ggplot(df_charly) +
aes(x = valence, y = album_artist) +
geom_boxplot(show.legend = F) +
labs(x = "Positividad",
y = "Artistas" ) +
labs(caption = 'Gr√É¬°fico 8 - Boxplot de la positividad')  +
scale_fill_brewer(palette = "Pastel1") +
ggtitle("BoxPlot de la Positividad por Artista" ) +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 9
options(repr.plot.width=6, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = valence ,color = liveness_dis) +
geom_point() +
ggtitle("Energia vs Positividad - Categorizado por En vivo") +
labs(caption = 'Gr√É¬°fico 9 - Scatter plot de la postividad vs la energ√É≠a considerando si se grab√É¬≥ en vivo') +
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 10
options(repr.plot.width=6, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = valence ,color = categoria_album_a) +
geom_point() +
ggtitle("Energia vs Positividad - Categorizado por Categoria de Album")+
labs(caption = 'Gr√É¬°fico 10 - Scatter plot de la postividad vs la energ√É≠a onsiderando la categor√É≠a')+
scale_fill_brewer(palette = "Pastel1")+
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 11
options(repr.plot.width=7, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = acousticness, color = liveness_dis) +
geom_point() +
ggtitle("Energia vs Nivel de Arcustica - Categorizado por En vivo") +
labs(caption = 'Gr√É¬°fico 11 - Scatter plot del nivel de ac√É¬∫stica vs la energ√É≠a considerando si fue grabada en vivo o no') +
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 12
options(repr.plot.width=7, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = energy, y = acousticness ,color = categoria_album_a)+
geom_point() +
ggtitle("Energia vs Nivel de Ac√É¬∫stica - Categorizado por Cat. del Album") +
labs(caption = 'Gr√É¬°fico 12 - Scatter plot del nivel de ac√É¬∫stica vs la energ√É≠a considerando la categor√É≠a del album') +
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 13
options(repr.plot.width=8, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = valence, y = acousticness, color = liveness_dis) +
geom_point() +
ggtitle("Positividad vs Nivel de Arcustica - Categorizado por En vivo") +
labs(caption = 'Gr√É¬°fico 13 - Scatter plot del nivel de ac√É¬∫stica vs la positividad considerando si fue grabado en vivo o no')+
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
#Grafico 14
options(repr.plot.width=8, repr.plot.height=2.5)
ggplot(df_charly) +
aes(x = valence, y = acousticness ,color = categoria_album_a) +
geom_point() +
ggtitle("Positividad vs Nivel de Arcustica - Categorizado por Cat. del Album")+
labs(caption = 'Gr√É¬°fico 14 - Scatter plot del nivel de ac√É¬∫stica vs la positividad considerando si la categor√É≠a del album')+
scale_fill_brewer(palette = "Pastel1") +
theme(axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
plot.title = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(angle = 45, hjust = 1)
)
View(top_cien_no_encontradas)
